name: deploy-ecs-docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  #构建docker镜像并推送到github包仓库
  build-and-push-image:
    runs-on: ubuntu-latest
    #权限
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: generate the image name
      id: generate-name
      run: echo "IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> ${GITHUB_ENV}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        file: ./Dockerfile
        tags: ${{ env.IMAGE }}

  #在阿里云ECS服务器上部署，使用ssh
  deploy-on-aliECS:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: ssh-to-ECS
      uses: appleboy/ssh-action@v1.0.3
      env:
        IMAGE: ${{ env.IMAGE }}
        ACCESS_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      with:
        command_timeout: 30s
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        envs: IMAGE
        script: | # 运行多行命令
            echo "[deploy] start deployment..."
            if [ ! -d "$app" ]; then
              mkdir "$app"
            fi
            # 进到当前文件夹
            cd ~/app

            # 停止服务

            docker container stop `docker ps -aq`
            docker rm -f $(docker ps -aq)
            docker rmi -f $(docker images -q)
            pkill python3

            #拉取镜像文件
            echo $ACCESS_TOKEN | docker login ghcr.io -u emptydream-zdb --password-stdin
            docker pull $IMAGE
            docker run --network host -d $IMAGE python ./test.py
            # 测试阶段

      
  
        

        
